@page "/adminAdress"
@using LibraryStoreEcommerce
@inject HttpClient Http
@inject ModalService _modalService
@inject MessageService _message
@using AntDesign
@inject NavigationManager NavigationManager
<head>
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="css/admin.css" rel="stylesheet" />   
</head>
<div class="row">
    <div class="col-2">
      
    </div>
    <div class="col-3" style="font-size:20px;">
        <span><i class="fa fa-shopping-basket" aria-hidden="true"></i>Quản Lý Địa Chỉ</span>
    </div>
     <div class="col-2">
       
    </div>
      <div class="col-3">
        <NavLink href="/addcate"><button class="btn btn-success m-r-5">Thêm Mới</button></NavLink>
    </div>
</div>
<hr />

<div class="row">
    <div class="col-4">

    </div>
    <div class="col-3">
        <div include="form-input-input()">
            <input @bind-value="searchInput.TextSearch" placeholder="Tìm kiếm sản phẩm" style=" border-radius: 8px;">                      
        </div>
    </div>
    <div class="col-3">
         <button style="margin-top: 4px;" class="btn btn-success m-r-5" >Tìm kiếm</button> <button style="margin-top: 4px" class="btn btn-success m-r-5" >Xoá bộ lọc</button>
    </div>
   
</div>
<body>
     
  <div style="background: aliceblue;margin-top:20px;">
        <div class="fix_screen1">
            <div class="row">  
                <div class="col-1"></div>
                <div class="col-10"> 
                        <table class="table table-hover" >
                            <thead>
                                <tr style="background-color:#FF9900">
                                    <th scope="col">STT</th>
                                    <th scope="col"> TỈNH/THÀNH PHỐ </th>
                                    <th scope="col">HÀNH ĐỘNG</th>
                                </tr>
                            </thead>
                            <tbody >
                                @foreach (var item in listaddress)
                                {
                                <tr>
                                    <th scope="row">@item.STT</th>
                                    <td>@item.AddressName</td>
                                 
                                    <td>
                                        <button Type="@ButtonType.Primary" @onclick="@(async ()=>await GetDistrictbyProvince (@item.ProvinceCode,@item.AddressName))" class="btn btn-warning">Xem</button>                  
                                        <a href="/detailtaxadmin/@item.ID">
                                        <button class="btn btn-primary m-r-5">Sửa</button>
                                        </a>                   
                                         <button class="btn btn-danger m-r-5" @onclick="@(()=>{ _visible = true; ID =@item.ID ;Name =@item.AddressName;})">Xóa</button>                
                                    </td>
                                </tr>              
                                }      
                            </tbody>
                        </table>          
                </div>                     
                 <div class="col-1"></div>                      
            </div>
        </div>
</div>
   @{RenderFragment 
    footer =@<Template>
         <button  @onclick="@(async ()=>await DeleteProvince (@ID))" class="btn btn-danger m-r-5">Đồng ý</button>
         <button  @onclick="HandleCancel" Type="@ButtonType.Primary" Ghost  class="btn btn-primary m-r-5">Quay lại</button>
    </Template>;
}  
 @{RenderFragment 
    footer1 =@<Template>
         <button  class="btn btn-danger m-r-5">Đồng ý</button>
         <button  @onclick="HandleCancel" Type="@ButtonType.Primary" Ghost  class="btn btn-primary m-r-5">Quay lại</button>
    </Template>;
    
}
<Modal Title="@title"
        Visible="@_visible"
        OnOk="@HandleOk"
        OnCancel="@HandleCancel"
        Footer="@footer">
    <p>Bạn có muốn xoá <b>@Name</b> không ?</p>    
</Modal>
<Modal 
        Visible="@_visible1"
        OnOk="@HandleOk"
        OnCancel="@HandleCancel"
         Footer="@footer1">
         <b>Các quận huyện của tỉnh @NameProvince</b>
<table class="table table-hover" >
            <thead>
                <tr style="background-color:#FF9900">
                    <th scope="col">STT</th>
                    <th scope="col"> TỈNH/THÀNH PHỐ </th>
                    <th scope="col">HÀNH ĐỘNG</th>
                </tr>
            </thead>
            <tbody >
                @foreach (var item in listdistrict)
                {
                <tr>
                    <th scope="row">@item.STT</th>                    
                    <td>@item.AddressName</td>                                
                    <td>                      
                        <a href="/detailtaxadmin/@item.ID">
                        <button class="btn btn-primary m-r-5">Sửa</button>
                        </a>                   
                        <button class="btn btn-danger m-r-5"  @onclick="@(()=>{ _visible = true; ID =@item.ID ;Name =@item.AddressName;})">Xóa</button>                
                    </td>
                </tr>              
                }      
            </tbody>
  </table>  
    <EditForm Model="address" OnSubmit="@SubmitEventHandler">
                       <DataAnnotationsValidator />  
  <div include="form-input-input()"> <label><ValidationMessage For="() => address.AddressName" /></label>
            <input @bind-value="address.AddressName" placeholder="Thêm quận,huyện" style=" border-radius: 8px;"><br /><br />   <button @onclick="InsertDistrict" type="submit" class="btn btn-danger m-r-5" >Thêm</button>                        
  </div>
 
     </EditForm>  
</Modal> 
</body>
@code {
    bool _visible1 = false;
    string title1 = "Các quận huyện của tỉnh";
    public string Name { get; set; } = string.Empty;
    public int ID { get; set; } = 0;
    public int STT = 1;
    protected override async Task OnInitializedAsync()
    {          
        await GetListAddress();
    }
    SearchInput searchInput = new SearchInput();
    public int PageIndex { get; set; } = 1;
    private int pageIndex = 1;
    private int PageIndex1 = 1;
    private int itemsPerPage = 12;
    private int totalPages = 1;

    public async Task DeleteProvince(int ID) 
    {  
        var addItem  = new Tax {ID=ID};
        var response = await Http.PostAsJsonAsync<Tax>("api/Tax/Delete", addItem);   
        if (response.IsSuccessStatusCode)
        {
            _visible = false;
            await Task.Delay(100);
            await _message.Success("Xoá sản phẩm thành công");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await _message.Error("Xoá sản phẩm thất bại");    
        }      
    }    
    string title = "Xác nhận xoá sản phẩm";
    bool _visible = false;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
        _visible1 = false;
    }
    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
        _visible1 = false;
    }  
    List<LibraryStoreEcommerce.Address> listaddress = new List<LibraryStoreEcommerce.Address>();
    private async Task GetListAddress()
    {   var addItem = new Address_SearchInput  { TextSearch = searchInput.TextSearch };
        var response = await Http.PostAsJsonAsync<Address_SearchInput>("api/Address/GetListProvince", addItem);
        listaddress = await response.Content.ReadFromJsonAsync<List<LibraryStoreEcommerce.Address>>();  
    }
    string selectd = "";
    List<LibraryStoreEcommerce.Tax> taxss = new List<LibraryStoreEcommerce.Tax>();
    private async Task GetListTax()
    {   var addItem = new Tax_SearchInput  { TextSearch = searchInput.TextSearch };
        var response = await Http.PostAsJsonAsync<Tax_SearchInput>("api/Tax/GetList", addItem);
        taxss = await response.Content.ReadFromJsonAsync<List<LibraryStoreEcommerce.Tax>>();  
    }
    private async Task RefeshGetListTax()
    {
        searchInput.TextSearch = "";
        var addItem = new Tax_SearchInput  { };
        var response = await Http.PostAsJsonAsync<Tax_SearchInput>("api/Tax/GetList", addItem);
        taxss = await response.Content.ReadFromJsonAsync<List<LibraryStoreEcommerce.Tax>>();  
    }
    int ParentID = 0;
    string NameProvince = "";
    List<Address> listdistrict = new List<Address>();
    public async Task GetDistrictbyProvince(int ID,string ProvinceCode)
    {
        ParentID = ID;
        NameProvince = ProvinceCode;
        _visible1 = true;
        var addItem = new LibraryStoreEcommerce.AddressInput {ID =ID};
        var response = await Http.PostAsJsonAsync<LibraryStoreEcommerce.AddressInput>("api/Address/SelectDistrictbyProvince", addItem);
        listdistrict = await response.Content.ReadFromJsonAsync<List<Address>>(); 
    }
    AddressInsert address = new AddressInsert();
    public async Task InsertDistrict()
    {    if(address.AddressName == "")
        {

        }
        else
        {
             var addItem = new LibraryStoreEcommerce.AddressInsert {AddressName =address.AddressName,ParentID=ParentID};
            var response = await Http.PostAsJsonAsync<LibraryStoreEcommerce.AddressInsert>("api/Address/InsertDistrict", addItem);
            if (response.IsSuccessStatusCode)
            {
                await GetDistrictbyProvince(ParentID,"");
                await _message.Success("Thêm quận huyện thành công");           
                }
            else
            {
                await _message.Error("Thêm quận huyện thất bại");
            }
        }
       
    }
     bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;
    private void SubmitEventHandler(EditContext context)
    {
         if (context.Validate())
        {
            displayValidationErrorMessages = false;
            displayUserAddedToDB = true;
        }
        else
        {
            displayValidationErrorMessages = true;
            displayUserAddedToDB = false;
        }
    }
}
