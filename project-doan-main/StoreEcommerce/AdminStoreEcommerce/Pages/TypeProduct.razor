@page "/adminType"
@using LibraryStoreEcommerce
@inject HttpClient Http
@inject ModalService _modalService
@inject MessageService _message
@using AntDesign
@inject NavigationManager NavigationManager
<head>
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="css/admin.css" rel="stylesheet" />   
</head>
<div class="row">
    <div class="col-2">
      
    </div>
    <div class="col-3" style="font-size:20px;">
        <span><i class="fa fa-shopping-basket" aria-hidden="true"></i>Quản Lý Địa Chỉ</span>
    </div>
     <div class="col-2">
       
    </div>
      <div class="col-3">
       
    </div>
</div>
<hr />

<div class="row">
    <div class="col-4">

    </div>
    <div class="col-3">
        <div include="form-input-input()">
            <input @bind-value="searchInput.TextSearch" placeholder="Tìm kiếm sản phẩm" style=" border-radius: 8px;">                      
        </div>
    </div>
    <div class="col-3">
         <button @onclick="GetListType" style="margin-top: 4px;" class="btn btn-success m-r-5" >Tìm kiếm</button> <button @onclick="DeleTeFilter" style="margin-top: 4px" class="btn btn-success m-r-5" >Xoá bộ lọc</button>
    </div>
   
</div>
<body>
     
  <div style="background: aliceblue;margin-top:20px;">
        <div class="fix_screen1">
            <div class="row">  
                <div class="col-1"></div>
                <div class="col-10"> 
                        <table class="table table-hover" >
                            <thead>
                                <tr style="background-color:#FF9900">
                                    <th scope="col">STT</th>
                                    <th scope="col"> LOẠI VẬN CHUYỂN </th>
                                     <th scope="col"> MÔ TẢ LOẠI VẬN CHUYỂN </th>
                                    <th scope="col">HÀNH ĐỘNG</th>
                                </tr>
                            </thead>
                            <tbody >
                                @foreach (var item in typeProducts)
                                {
                                <tr>
                                    <th scope="row">@item.STT</th>
                                   @if(@item.Edit)
                                    {
                                         <td>
                                              <div include="form-input-input()">
                                                    <input @bind-value="item.NameType" style=" border-radius: 8px;" type="text" id="fname" name="fname" />
                                             </div>
                                        </td>
                                    }
                                     else
                                    {
                                        <td>@item.NameType</td>
                                    }
                                     @if(@item.Edit)
                                    {
                                         <TextArea AutoSize OnResize="OnResize" @bind-Value="item.Descriptions" /> 
                                    }
                                    else
                                    {
                                         <td>
                                         @item.Descriptions
                                         </td>
                                    }
                                   
                                     <td>
                                        <button  @onclick="@(()=>{ _visible1 = true;typeProductInsert.Name =string.Empty;typeProductInsert.Description =string.Empty;})" class="btn btn-primary m-r-5">Thêm mới</button>    <span> &ensp;</span>             
                                      @if(@item.Edit)
	                                    {
	                                      <span> &ensp;</span><button  @onclick="()=>UpdateType(item)"  class="btn btn-primary m-r-5">OK</button>               
	                                    }
	                                  else
	                                    {
		                                  <button class="btn btn-primary m-r-5" @onclick="()=>ChangeBorder(item,typeProducts)">Sửa</button>  
	                                    }                                                                                                                        
                                           <span> &ensp;</span><button class="btn btn-danger m-r-5" @onclick="@(()=>{ _visible = true; ID =@item.ID ;Name =@item.NameType;})">Xóa</button>                
                                    </td>
                                </tr>              
                                }      
                            </tbody>
                        </table>          
                </div>                     
                 <div class="col-1"></div>                      
            </div>
        </div>
</div>
   @{RenderFragment 
    footer =@<Template>
         <button  @onclick="@(async ()=>await DeleteProvince (@ID))" class="btn btn-danger m-r-5">Đồng ý</button>
         <button  @onclick="HandleCancel" Type="@ButtonType.Primary" Ghost  class="btn btn-primary m-r-5">Quay lại</button>
    </Template>;
}  
<Modal Title="@title"
        Visible="@_visible"
        OnOk="@HandleOk"
        OnCancel="@HandleCancel"
        Footer="@footer">
    <p>Bạn có muốn xoá <b>@Name</b> không ?</p>    
</Modal>
 @{RenderFragment 
    footer1 =@<Template>
       
    </Template>;
}  
<Modal Title="@title1"
        Visible="@_visible1"
        OnOk="@HandleOk"
        OnCancel="@HandleCancel"
        Footer="@footer1">
    <EditForm Model="typeProductInsert" OnSubmit="@SubmitEventHandler">
                       <DataAnnotationsValidator />  
         <div style="color:#757575;">Tên loại vận chuyển</div>
        <div include="form-input-input()">
            <Input @bind-Value="typeProductInsert.Name" placeholder="Nhập họ tên nhà cung cấp" style=" border-radius: 8px;"> </Input>
        </div>   
        <label><ValidationMessage For="() => typeProductInsert.Name" /></label>
        <span style="color:#757575;">Mô tả loại vận chuyển</span>            
         <TextArea AutoSize OnResize="OnResize" @bind-Value="typeProductInsert.Description" /> 
        <label><ValidationMessage For="() => typeProductInsert.Description" /></label>
            <br />
            <br />
           <button  @onclick="CheckInsert" class="btn btn-danger m-r-5">Thêm mới</button>
           <button  @onclick="HandleCancel" Type="@ButtonType.Primary" Ghost  class="btn btn-primary m-r-5">Quay lại</button>
         </EditForm>    
</Modal>
</body>
@code {
    bool _visible1 = false;
    string title1 = "Thêm loại vận chuyển";
    public string Name { get; set; } = string.Empty;
    public int ID { get; set; } = 0;
    public int STT = 1;
    protected override async Task OnInitializedAsync()
    {          
        await GetListType();
    }
    SearchInput searchInput = new SearchInput();
    public int PageIndex { get; set; } = 1;
    private int pageIndex = 1;
    private int PageIndex1 = 1;
    private int itemsPerPage = 12;
    private int totalPages = 1;

    public async Task DeleteProvince(int ID) 
    {  
        var addItem  = new TypeProductDelete {ID=ID};
        var response = await Http.PostAsJsonAsync<TypeProductDelete>("api/SystemKey/DeleteType", addItem);   
        if (response.IsSuccessStatusCode)
        {
            _visible = false;
            await _message.Success("Xoá loại vận chuyển thành công");
            await GetListType();
        }
        else
        {
            await _message.Error("Xoá loại vận chuyển thất bại");    
        }      
    }    
    string title = "Xác nhận xoá sản phẩm";
    bool _visible = false;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
        _visible1 = false;
    }
    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
        _visible1 = false;
    }  
    List<LibraryStoreEcommerce.SystemKey> typeProducts = new List<LibraryStoreEcommerce.SystemKey>();
    private async Task GetListType()
    {   var addItem = new LibraryStoreEcommerce.TypeProduct  { TextSearch = searchInput.TextSearch };
        var response = await Http.PostAsJsonAsync<LibraryStoreEcommerce.TypeProduct>("api/SystemKey/TypeProduct", addItem);
        typeProducts = await response.Content.ReadFromJsonAsync<List<LibraryStoreEcommerce.SystemKey>>();  
    }
    public async Task ChangeBorder(SystemKey type,List<SystemKey> types)
    {
        foreach (var item in types)
        {
            item.Edit = false;
        }
        type.Edit=true;
    }
    // Xoá bộ lọc
    public async Task DeleTeFilter()
    {
        searchInput.TextSearch = string.Empty;
        await GetListType();
    }
    // update
    public async Task UpdateType(SystemKey item)
    {
         var addItem = new LibraryStoreEcommerce.TypeProductInsert  {ID =item.ID, Name = item.NameType ,Description =item.Descriptions};
        var response = await Http.PostAsJsonAsync<LibraryStoreEcommerce.TypeProductInsert>("api/SystemKey/UpdateType", addItem);
        if (response.IsSuccessStatusCode)
        {
            _visible1 = false;
            await _message.Success("Sửa loại vận chuyển thành công");
            await GetListType();
        }
        else
        {
            await _message.Error("Sửa loại vận chuyển thất bại");    
        } 
    }
    //Add Type
    private void SubmitEventHandler(EditContext context)
    {
        if (context.Validate())
        {

        }
        else
        {
        }
    }
    TypeProductInsert typeProductInsert = new TypeProductInsert();
    // Get TextArea
    private void OnResize(OnResizeEventArgs args)
    {
        Console.WriteLine($"OnResizeEvent width:{args.Width},height:{args.Height}");
    }
    public async Task CheckInsert()
    {
        if(typeProductInsert.Name == string.Empty || typeProductInsert.Description== string.Empty )
        {

        }
        else
        {
            await InSertType();
        }
        
    }
    private async Task InSertType()
    {   var addItem = new LibraryStoreEcommerce.TypeProductInsert  { Name = typeProductInsert.Name ,Description =typeProductInsert.Description};
        var response = await Http.PostAsJsonAsync<LibraryStoreEcommerce.TypeProductInsert>("api/SystemKey/InsertType", addItem);
        if (response.IsSuccessStatusCode)
        {
            _visible1 = false;
            await _message.Success("Thêm loại vận chuyển thành công");
            await GetListType();
        }
        else
        {
            await _message.Error("Xoá loại vận chuyển thất bại");    
        } 
    }
}
